import library.MyHashMap;

import java.util.*;

public class MainClass {
    public static List<String> defenition = new ArrayList<>(Arrays.asList(
            "АБЛЯЦИЯ", "АБСОРБЦИЯ", "АВТОВОЛНЫ", "АВТОГЕНЕРАТОР", "АВТОИОНИЗАЦИЯ", "АВТОКОЛЕБАНИЯ",
            "ВАТТМЕТР", "ВЕКТОР", "ВЕЩЕСТВО", "БЕККЕРЕЛЬ", "БЕТА-ИЗЛУЧЕНИЕ", "БИЕНИЯ",
            "БЛАНКЕТ", "БОЗЕ-ГАЗ", "БОЛОМЕТР", "ДВИЖЕНИЕ", "ДВОЙНИК", "ДЕБАЕГРАММА",
            "ДЕБАЙ", "ДЕЛЕНИЕ", "ДЕНСИМЕТР", "ДЕСОРБЦИЯ", "КАВИТАЦИЯ", "КАЛИБРОАКА",
            "КАЛОРИМЕТР", "КАЛОРИМЕТРИЯ", "КАЛОРИЯ", "КАНДЕЛА", "КВАЗИЧАСТЙЦА ", "КВАРКИ"
    ));
    public static List<String> values = new ArrayList<>(Arrays.asList(
            "Унос вещества с поверхности твердого тела потоком горячих газов, обтекающих эту поверхность. ",
            "Объёмное поглощение вещества из раствора или газовой смеси твёрдым телом или жидкостью.",
            "Автоколебательные процессы в средах с распределёнными параметрами, возникающие в результате потери устойчивости однородного состояния сред. ",
            "Генератор колебаний с самовозбуждением. ",
            "Процесс ионизации атомов в сильных электрических полях.   ",
            "В нелинейной диссипативной системе - незатухающие колебания,  поддерживаемые внешним источником энергии, вид и свойства которых определяются самой системой. ",
                "Прибор для измерения активной мощ\u00ADности в электрических цепях.",
                "векторная ВЕЛИЧИНА.",
                "Вид мате\u00ADрии, обладающий массой по\u00ADкоя.",
                "Единица активности радиоактивного нуклида в СИ.",
                "По\u00ADток бета- частиц, испускаемых атомными ядрами при бета- распаде.",
                "Периоди\u00ADческие изменения амплитуды колебания, возникающие при наложении двух гармониче\u00ADских колебаний с близкими частотами.",
            "ЗОНА воспроизводства.",
            "Совокуп\u00ADность свободных бозонов.",
            "Прибор для измерения энергии элек\u00ADтромагнитного    излучения, действие которого основано на зависимости электриче\u00ADского сопротивления от тем\u00ADпературы.",
            "Перемеще\u00ADние тел в пространстве отно\u00ADсительно некоторой системы отсчёта.",
            "Смежные различно  ориентированные области в кристалле, кристал\u00ADлическая структура которых является взаимным зеркаль\u00ADным отражением.",
            "Рент\u00ADгенограмма поликристалла, снятая по методу Дебая — Шеррера.",
                "Внесистемная единица электрического дипольного момента.",
                "Процесс расщепления атомного ядра на несколько более лёгких ядер-осколков.",
                "ПЛОТ\u00ADНОМЕР.",
                "Удаление адсорбированного вещества с поверхности адсорбирующе\u00ADго вещества.",
                "Образо\u00ADвание в жидкости полостей, заполненных газом, паром или их смесью.",
                "Опре\u00ADделение погрешностей одной меры или совокупности мер путём сравнения с образцо\u00ADвой мерой.",
            "Прибор для измерения количества те\u00ADплоты, выделяющейся или по\u00ADглощаемой в каком-либо фи\u00ADзическом процессе.",
            "Со\u00ADвокупность методов измере\u00ADния тепловых эффектов, со\u00ADпровождающих   различные физические процессы.",
            "Внесистемная единица количества теп\u00ADлоты.",
            " Единица си\u00ADлы света в СИ.",
            "Эле\u00ADментарное возбуждение систе\u00ADмы многих частиц, ведущее себя в некотором отношении как квантовая частица.",
            "Фундамен\u00ADтальные частицы, из групп-которых (двоек или троек), по современным представ\u00ADлениям, состоят все адроны."
            ));

    public static void main(String[] args) {
        fasad();
    }

    public static void fasad(){

        MyHashMap<String, Fisics> hashMap = new MyHashMap<>();
        for(int i = 0; i < defenition.size(); i++){
            hashMap.add(defenition.get(i), new Fisics(values.get(i)));
        }

        System.out.println(hashMap.getAllDataInVisual());
        System.out.println(hashMap.get("БЛАНКЕТ"));

        hashMap.remove("БЛАНКЕТ");
        System.out.println(hashMap.getAllDataInVisual());
        hashMap.remove("БОЗЕ-ГАЗ");
        hashMap.remove("ДЕСОРБЦИЯ");
        System.out.println(hashMap.getAllDataInVisual());

        System.out.println("Data with Iterator: ");
        Iterator<Fisics> iterator = hashMap.iterator();
        while (iterator.hasNext()){
            System.out.print(iterator.next() + "\t");
        }
        System.out.println("\nKeys with Iterator: ");
        MyHashMap.MyHashIterator iterator1 = (MyHashMap.MyHashIterator) hashMap.iterator();
        int counter = 0;
        while (iterator1.hasNext()){
            if(counter == 10){
                System.out.println();
                counter = 0;
            }
            counter++;
            System.out.print(iterator1.nextkey() + "\t");
        }

        System.out.println("\nNomber od elements: " + hashMap.getSize());

    }

}
